// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/auth/auth.proto

package auth

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Auth service

func NewAuthEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Auth service

type AuthService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	// rpc ClientStream(stream ClientStreamRequest) returns (ClientStreamResponse) {}
	// rpc ServerStream(ServerStreamRequest) returns (stream ServerStreamResponse) {}
	// rpc BidiStream(stream BidiStreamRequest) returns (stream BidiStreamResponse) {}
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*RefreshTokenResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*RefreshTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.RefreshToken", in)
	out := new(RefreshTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.Verify", in)
	out := new(VerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	// rpc ClientStream(stream ClientStreamRequest) returns (ClientStreamResponse) {}
	// rpc ServerStream(ServerStreamRequest) returns (stream ServerStreamResponse) {}
	// rpc BidiStream(stream BidiStreamRequest) returns (stream BidiStreamResponse) {}
	Login(context.Context, *LoginRequest, *LoginResponse) error
	RefreshToken(context.Context, *RefreshTokenRequest, *RefreshTokenResponse) error
	Verify(context.Context, *VerifyRequest, *VerifyResponse) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) error {
	type auth interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *RefreshTokenResponse) error
		Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error
	}
	type Auth struct {
		auth
	}
	h := &authHandler{hdlr}
	return s.Handle(s.NewHandler(&Auth{h}, opts...))
}

type authHandler struct {
	AuthHandler
}

func (h *authHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.AuthHandler.Call(ctx, in, out)
}

func (h *authHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AuthHandler.Login(ctx, in, out)
}

func (h *authHandler) RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *RefreshTokenResponse) error {
	return h.AuthHandler.RefreshToken(ctx, in, out)
}

func (h *authHandler) Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error {
	return h.AuthHandler.Verify(ctx, in, out)
}
