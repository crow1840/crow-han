// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/user.proto

package user

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for User service

func NewUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for User service

type UserService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	ResetUserPassword(ctx context.Context, in *ResetUserUserRequest, opts ...client.CallOption) (*ResetUserResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...client.CallOption) (*GetUsersResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error)
	UpdateUserSelfInfo(ctx context.Context, in *UpdateUserSelfInfoRequest, opts ...client.CallOption) (*UpdateUserSelfInfoResponse, error)
	UpdateUserSelfPassword(ctx context.Context, in *UpdateUserSelfPasswordRequest, opts ...client.CallOption) (*UpdateUserSelfPasswordResponse, error)
	GetUserSelfInfo(ctx context.Context, in *GetUserSelfInfoRequest, opts ...client.CallOption) (*GetUserSelfInfoResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "User.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "User.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ResetUserPassword(ctx context.Context, in *ResetUserUserRequest, opts ...client.CallOption) (*ResetUserResponse, error) {
	req := c.c.NewRequest(c.name, "User.ResetUserPassword", in)
	out := new(ResetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...client.CallOption) (*GetUsersResponse, error) {
	req := c.c.NewRequest(c.name, "User.GetUsers", in)
	out := new(GetUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "User.GetUser", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.name, "User.DeleteUser", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUser", in)
	out := new(UpdateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserSelfInfo(ctx context.Context, in *UpdateUserSelfInfoRequest, opts ...client.CallOption) (*UpdateUserSelfInfoResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserSelfInfo", in)
	out := new(UpdateUserSelfInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserSelfPassword(ctx context.Context, in *UpdateUserSelfPasswordRequest, opts ...client.CallOption) (*UpdateUserSelfPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserSelfPassword", in)
	out := new(UpdateUserSelfPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserSelfInfo(ctx context.Context, in *GetUserSelfInfoRequest, opts ...client.CallOption) (*GetUserSelfInfoResponse, error) {
	req := c.c.NewRequest(c.name, "User.GetUserSelfInfo", in)
	out := new(GetUserSelfInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	ResetUserPassword(context.Context, *ResetUserUserRequest, *ResetUserResponse) error
	GetUsers(context.Context, *GetUsersRequest, *GetUsersResponse) error
	GetUser(context.Context, *GetUserRequest, *GetUserResponse) error
	DeleteUser(context.Context, *DeleteUserRequest, *DeleteUserResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *UpdateUserResponse) error
	UpdateUserSelfInfo(context.Context, *UpdateUserSelfInfoRequest, *UpdateUserSelfInfoResponse) error
	UpdateUserSelfPassword(context.Context, *UpdateUserSelfPasswordRequest, *UpdateUserSelfPasswordResponse) error
	GetUserSelfInfo(context.Context, *GetUserSelfInfoRequest, *GetUserSelfInfoResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		ResetUserPassword(ctx context.Context, in *ResetUserUserRequest, out *ResetUserResponse) error
		GetUsers(ctx context.Context, in *GetUsersRequest, out *GetUsersResponse) error
		GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error
		UpdateUserSelfInfo(ctx context.Context, in *UpdateUserSelfInfoRequest, out *UpdateUserSelfInfoResponse) error
		UpdateUserSelfPassword(ctx context.Context, in *UpdateUserSelfPasswordRequest, out *UpdateUserSelfPasswordResponse) error
		GetUserSelfInfo(ctx context.Context, in *GetUserSelfInfoRequest, out *GetUserSelfInfoResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.UserHandler.Call(ctx, in, out)
}

func (h *userHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.UserHandler.CreateUser(ctx, in, out)
}

func (h *userHandler) ResetUserPassword(ctx context.Context, in *ResetUserUserRequest, out *ResetUserResponse) error {
	return h.UserHandler.ResetUserPassword(ctx, in, out)
}

func (h *userHandler) GetUsers(ctx context.Context, in *GetUsersRequest, out *GetUsersResponse) error {
	return h.UserHandler.GetUsers(ctx, in, out)
}

func (h *userHandler) GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error {
	return h.UserHandler.GetUser(ctx, in, out)
}

func (h *userHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error {
	return h.UserHandler.DeleteUser(ctx, in, out)
}

func (h *userHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error {
	return h.UserHandler.UpdateUser(ctx, in, out)
}

func (h *userHandler) UpdateUserSelfInfo(ctx context.Context, in *UpdateUserSelfInfoRequest, out *UpdateUserSelfInfoResponse) error {
	return h.UserHandler.UpdateUserSelfInfo(ctx, in, out)
}

func (h *userHandler) UpdateUserSelfPassword(ctx context.Context, in *UpdateUserSelfPasswordRequest, out *UpdateUserSelfPasswordResponse) error {
	return h.UserHandler.UpdateUserSelfPassword(ctx, in, out)
}

func (h *userHandler) GetUserSelfInfo(ctx context.Context, in *GetUserSelfInfoRequest, out *GetUserSelfInfoResponse) error {
	return h.UserHandler.GetUserSelfInfo(ctx, in, out)
}
